#inherit "4DGL_16bitColours.fnc"
#inherit "VisualConst.inc"
#inherit "NCFI_r15Const.inc"    //constants generated by declaration in NC_LanguageArray
#inherit "NC_16bitColors.fnc"         //definition of colors used in the NC images for text transparency
#inherit "NC_OutputCodes_Phase2_rev8.inc" //definition of error code request names and other constants
//#constant TEXT_STRING_MAX     200     //maximum length of text string read from file.  Used for language dynamic text strings


#inherit "NC_TextFunctions_Pointers_Rev1.fnc" //Text manipulation routines
    //CenterText                    Font_Nirmala15_Error_Red        Font_Nirmala15_Error_Blue
    //CenterTextImage2Lines         CenterTextImage3Lines           Font_Nirmala15_Halt_Blue
    //DisplaySystemError            CenterErrorStringImage          CenterTextImage
    //GetTimeDateValue

#inherit "NC_ComFunctions_Pointers_Rev5.fnc" //Com port routines
    //SetupComX                     GetCodes                        GetString
    //IsDateValid                   StringToInt                     HexStringToInt
    //SetCodeWithNumber             GetCodeNoHeader                 HexAsciiToInt
    //GetCodesWithDelay             GetErrorCodeIndex
#inherit "NC_FileFunctions_Pointers_Rev8.fnc" //File and I/O routines
    //GetErrorTextFromFile          PrintSysErrBodyFromFile     PrintServiceInfoFromFile
    //PrintSysErrHeaderFromFile     PrintHaltAddressFromFile    PrintProdInfoFromFile


//Filter info screens
//func main(var Language var PortPtr, var TextPtr)
//Language is a value 0-3 that determines which images to use
//PortPtr is a pointer to the ComBuf array used for the com port circular buffer
//TextPtr is a pointer to the String array used for file reads
//Does not return anything
//Example call:
    //b:=combuf;   //get pointer
    //c:=ErrorString; //get pointer
    //TheFunc := file_LoadFunction("NCFI_r3.4FN");   //load function
    //temp:=TheFunc(Language,b,c);
    //mem_Free(TheFunc); //get function memory back



func main(var Language, var PortPtr, var TextPtr )   //use this for production
//func main(var Language,  var TextPtr ) //serial comm buffer this is for standalone,   comment this out for production
//var PortPtr[24];  //serial comm buffer this is for standalone,   comment this out for production

gfx_Set(SCREEN_MODE,PORTRAIT_R) ;
//gfx_Cls();
//print("in NCFI before var ",mem_Heap());
//pause(3000);


var p;
var temp;
var Nirmala15;   //redirect pointer for readibility
var NChndl;      //pointer to images
var NCFont1;     //pointer to font

gfx_Set(SCREEN_MODE,PORTRAIT_R) ;
touch_Set(TOUCH_ENABLE);
file_Unmount();
//print("in NCFI after var ",mem_Heap());
//pause(3000);

    //p:=PortPtr;  //setup pointer to string
    SetupComX(PortPtr);     //set com
    //LoadImages();    //load from SD card
    gosub LoadImagesSub;
    //print("in NCFI after LI ",mem_Heap());
    //pause(3000);
    redraw:  //use this to redraw on return from function
    IonHeader(Language, NChndl); //put up common header images
    img_SetWord(NChndl, iErrorBackground, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iErrorBackground) ;
    img_SetWord(NChndl, iFilterInfo, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iFilterInfo) ;
    img_SetWord(NChndl, iContaminants, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iContaminants) ;
    img_ClearAttributes(NChndl, iChangeButton, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iChangeButton);  // show button, only do this once
    img_SetWord(NChndl, iChangeButton, IMAGE_INDEX, Language); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iChangeButton) ;
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,408);   //set next position for horiz rule
    img_Show(NChndl,iSettings_rule_horz_white) ;               //put the image on the screen

    Font_Nirmala15_Halt_Blue(Nirmala15);
    //print("\nFilterInfo \ncalling print");
    //print("Memory ",mem_Heap());
    //pause(3000);
    PrintProdInfoFromFile(Language, 'F',TextPtr,PortPtr); //print product info text
    Font_Nirmala15_Error_Blue(Nirmala15);
    //print("\nFilterInfo \nafter =");
    //print("Memory ",mem_Heap());
    readit:
    temp:=ReadButton(NChndl);
    if (temp==iChangeButton) //wait for back button to be pressed
        img_SetAttributes(NChndl, iChangeButton, I_TOUCH_DISABLE); // cleanup handle
        SelectFilter(Language, PortPtr,NChndl);    //only two buttons, so if back was not pressed it had to be select filter
        goto redraw; //redraw screen on return from function call
    endif                                                   //clunky solution for masking non button areas, but overall is simpler way to do a
    //timeout on each screen - screen timeout routine will bring back to dispense screen when enabled
    if (temp != -2 && temp!=iback_icon) goto readit;  //no touch timeout

    img_SetAttributes(NChndl, iChangeButton, I_TOUCH_DISABLE); // cleanup handle
    gosub MemFreeSub;  //cleanup memory and handles, stop timers, unmount
return;

LoadImagesSub:
	Mount


    NCFont1 := file_LoadImageControl("NCFI_r15.da1", "NCFI_r15.gc1", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
    NChndl := file_LoadImageControl("NCFI_r15.dat", "NCFI_r15.gci", 1);
    Nirmala15 := NCFont1;   //redirect pointer for readibility
endsub;

MemFreeSub:      //cleanup memory and handles, stop timers
    com_Reset(); //shutoff com port
    sys_SetTimer(TIMER3,0);  //stop timers
    sys_SetTimer(TIMER1,0);  //stop timers
    mem_Free(NChndl);  //free image handle
    mem_Free(NCFont1); //free font handle
    txt_FontID(FONT3);    // called program may have set non internal font! must reset here
    file_Unmount(); //clear the file handle
endsub;


endfunc


func InstallGraphic(var Language)
IonHeader (Language); //this puts the ion header, iback_icon button, horiz rule and background for most screens

    img_SetPosition(NChndl,iSettings_rule_horz_white,0,124);
    img_Show(NChndl,iSettings_rule_horz_white) ;
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,184);
    img_Show(NChndl,iSettings_rule_horz_white) ;
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,244);
    img_Show(NChndl,iSettings_rule_horz_white) ;
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,304);
    img_Show(NChndl,iSettings_rule_horz_white) ;


    // Userimages3 1.0 generated 11/12/2016 2:29:30 PM
    img_SetWord(NChndl, iUserimages3, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iUserimages3) ;

    // Carbonplus 1.0 generated 11/12/2016 2:29:30 PM
    img_ClearAttributes(NChndl, iCarbonplus, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, iCarbonplus, IMAGE_INDEX, 0+(Language*2)); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iCarbonplus) ;

    // carbonpro 1.0 generated 11/12/2016 2:29:30 PM
    img_ClearAttributes(NChndl, icarbonpro, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, icarbonpro, IMAGE_INDEX, 0+(Language*2)); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,icarbonpro) ;

    // Fibertek 1.0 generated 11/12/2016 2:29:30 PM
    img_ClearAttributes(NChndl, iFibertek, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, iFibertek, IMAGE_INDEX, 0+(Language*2)); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iFibertek) ;

    // Carbonphos 1.0 generated 11/12/2016 2:29:30 PM
    img_ClearAttributes(NChndl, iCarbonphos, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, iCarbonphos, IMAGE_INDEX, 0+(Language*2)); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iCarbonphos) ;

    // Userimages4 1.0 generated 11/12/2016 2:29:30 PM
    img_SetWord(NChndl, iUserimages4, IMAGE_INDEX, 0) ; // where frame is 0 to -1
    img_Show(NChndl,iUserimages4) ;

    // InstallGraphic 1.0 generated 11/12/2016 2:29:30 PM
    img_SetWord(NChndl, iInstallGraphic, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iInstallGraphic) ;

endfunc

func IonHeader (var Language, var NChndl)
//this puts the ion header, back button, horiz rule and background for most screens
    img_SetWord(NChndl, iBackground, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iBackground) ;

    img_SetPosition(NChndl,iSettingsTop,0,0);
    img_SetWord(NChndl, iSettingsTop, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iSettingsTop) ;
        // back_icon 1.0 generated 8/25/2016 4:19:42 PM

    img_ClearAttributes(NChndl, iback_icon, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    //img_Show(NChndl, iback_icon);  // show button, only do this once
    img_SetWord(NChndl, iback_icon, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iback_icon) ;

                                        // logo_sm 1.0 generated 8/19/2016 10:29:23 AM
    //img_SetPosition(NChndl,ilogo_sm,202,17);
    img_ClearAttributes(NChndl, ilogo_sm, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, ilogo_sm, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl, ilogo_sm);  // show button, only do this once



    img_SetPosition(NChndl,iSettings_rule_horz_white,0,59);
    img_Show(NChndl,iSettings_rule_horz_white) ;


endfunc

func SetCodeTimer()  //this sets up the time out for the dispense screen saver
sys_SetTimer(TIMER3,5000);  //set timer to check for errors every 5 seconds
endfunc

func FilterInfo(var Language)
var temp;
    redraw:  //use this to redraw on return from function
    IonHeader(Language);
    img_SetWord(NChndl, iErrorBackground, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iErrorBackground) ;
    img_SetWord(NChndl, iFilterInfo, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iFilterInfo) ;
    img_SetWord(NChndl, iContaminants, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iContaminants) ;
    img_ClearAttributes(NChndl, iChangeButton, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iChangeButton);  // show button, only do this once
    img_SetWord(NChndl, iChangeButton, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iChangeButton) ;
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,408);   //set next position for horiz rule
    img_Show(NChndl,iSettings_rule_horz_white) ;               //put the image on the screen

    Font_Nirmala15_Halt_Blue();
    //print("\nFilterInfo \ncalling print L=", Language);
    PrintProdInfoFromFile(Language, 'F'); //print product info text

    readit:
    temp:=ReadButton(NChndl);;
    if (temp==iChangeButton) //wait for back button to be pressed
    img_SetAttributes(NChndl, iChangeButton, I_TOUCH_DISABLE); // cleanup handle
    SelectFilter(Language, PortPtr,NChndl);    //only two buttons, so if back was not pressed it had to be select filter
    goto redraw; //redraw screen on return from function call
    endif                                                   //clunky solution for masking non button areas, but overall is simpler way to do a
    //timeout on each screen - screen timeout routine will bring back to dispense screen when enabled
    if (temp != iback_icon) goto readit;  //ignore other touches, go back or timeout
    img_SetAttributes(NChndl, iChangeButton, I_TOUCH_DISABLE); // cleanup handle

endfunc

func SelectFilter(var Language,var PortPtr, var NChndl)
var rule,temp,filter;
var gobackflag;  //used to help with  program flow

    IonHeader(Language,NChndl);
    redraw:  //use this to redraw on return from function
    gobackflag:=0;  //used to help with  program flow
    img_SetWord(NChndl, iErrorBackground, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iErrorBackground) ;

    img_SetWord(NChndl, iSelectFilter, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iSelectFilter) ;

    // Carbonplus 1.0 generated 12/13/2016 6:02:21 PM
    img_ClearAttributes(NChndl, iCarbonplus, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iCarbonplus);  // show button, only do this once
    img_SetWord(NChndl, iCarbonplus, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iCarbonplus) ;

    // carbonpro 1.0 generated 12/13/2016 6:02:21 PM
    img_ClearAttributes(NChndl, icarbonpro, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, icarbonpro);  // show button, only do this once
    img_SetWord(NChndl, icarbonpro, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,icarbonpro) ;

    // Fibertek 1.0 generated 12/13/2016 6:02:21 PM
    img_ClearAttributes(NChndl, iFibertek, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iFibertek);  // show button, only do this once
    img_SetWord(NChndl, iFibertek, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iFibertek) ;

    // Carbonphos 1.0 generated 12/13/2016 6:02:21 PM
    img_ClearAttributes(NChndl, iCarbonphos, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iCarbonphos);  // show button, only do this once
    img_SetWord(NChndl, iCarbonphos, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iCarbonphos) ;

 // Carbonphos 1.0 generated 12/13/2016 6:02:21 PM
    img_ClearAttributes(NChndl, iCarbonSilv, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iCarbonSilv);  // show button, only do this once
    img_SetWord(NChndl, iCarbonSilv, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iCarbonSilv) ;

    // InstallGraphic 1.0 generated 12/13/2016 6:02:21 PM
    img_SetWord(NChndl, iInstallGraphic, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iInstallGraphic) ;


    for (rule:=124; rule <305 ;rule+=60)     //plot horizontal rules
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,rule);   //set next position for horiz rule
    img_Show(NChndl,iSettings_rule_horz_white) ;               //put the image on the screen
    next             //put the image on the screen

    readit:  //loop here
    temp:=ReadButton(NChndl);   //get button press
    switch (temp)   //select filter type based on keypress
        case iCarbonplus:
            //SetCodeWithNumber(SETFILTERTYPE,0);
            filter:=0;
            gosub Cleanandgo;
        break;
        case icarbonpro:
            //SetCodeWithNumber(SETFILTERTYPE,1);
            filter:=1;
            gosub Cleanandgo;
            //if (temp !=-2) goto redraw; //redraw screen on return from function call
        break;
        case iFibertek:
            //SetCodeWithNumber(SETFILTERTYPE,2);
            filter:=2;
            gosub Cleanandgo;
            //if (temp !=-2) goto redraw; //redraw screen on return from function call
        break;
        case iCarbonphos:
            //SetCodeWithNumber(SETFILTERTYPE,3);
            filter:=3;
            gosub Cleanandgo;
            //if (temp !=-2) goto redraw; //redraw screen on return from function call
        break;
        case iCarbonSilv:
            //SetCodeWithNumber(SETFILTERTYPE,3);
            filter:=4;
            gosub Cleanandgo;
            //if (temp !=-2) goto redraw; //redraw screen on return from function call
        break;
        case iback_icon:
             //cleanup and leave
            img_SetAttributes(NChndl, iCarbonplus, I_TOUCH_DISABLE);
            img_SetAttributes(NChndl, icarbonpro, I_TOUCH_DISABLE);
            img_SetAttributes(NChndl, iFibertek, I_TOUCH_DISABLE);
            img_SetAttributes(NChndl, iCarbonphos, I_TOUCH_DISABLE);
            img_SetAttributes(NChndl, iCarbonSilv, I_TOUCH_DISABLE);
        break;
        endswitch

        if (temp==-1)
        goto readit; //loop to ignore non keypad presses
        endif
        if (gobackflag==1)
        goto redraw;
        endif//we had a back arrow
return;  //return from function

        Cleanandgo:
        img_SetAttributes(NChndl, iCarbonplus, I_TOUCH_DISABLE);
        img_SetAttributes(NChndl, icarbonpro, I_TOUCH_DISABLE);
        img_SetAttributes(NChndl, iFibertek, I_TOUCH_DISABLE);
        img_SetAttributes(NChndl, iCarbonphos, I_TOUCH_DISABLE);
        img_SetAttributes(NChndl, iCarbonSilv, I_TOUCH_DISABLE);
        //img_SetAttributes(NChndl, iback_icon, I_TOUCH_DISABLE);
        temp:=FilterTimer(Language, PortPtr,NChndl,filter);
        if (temp==iback_icon)
        gobackflag:=1;//SetFilterTimer(NChndl);;
        endif
        endsub;
endfunc

func FilterTimer( var Language,var PortPtr, var NChndl, var FilterType)
var temp,months,maxgallons,gallons,max;
var galloncode;
var metric;

//var FilterType;
//var StringCode; //used to store string type info codes

    //FilterType:=(GetCodeByte((GetCodes(REQFILTERNUM,PortPtr))));//get filter number
    //metric:=GetCodes(REQUNITS, PortPtr);   ////0=english 1=metric
    metric:= HIbyte(GetCodes(REQUNITS, PortPtr));   //0=ENG, 1=METRIC code to determine if english or metric units

    if (FilterType ==0 || FilterType ==2)    //setup default setpoints
    max:=12;
    months:=12;
    if (metric==1)
    gallons:=5700; //liters
    else
    gallons:=1500;
    endif
    galloncode:=3; // Gallons 500,750,1000,1500 0-3
    else
    max:=6;
    months:=6;
    if (metric==1)
    gallons:=2850;
    else
    gallons:=750;
    endif
    galloncode:=1; // Gallons 500,750,1000,1500 0-3
    endif

    IonHeader(Language,NChndl);
    img_SetWord(NChndl, iErrorBackground, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iErrorBackground) ;
    img_SetPosition(NChndl,iSettings_rule_horz_white,0,408);   //set next position for horiz rule
    img_Show(NChndl,iSettings_rule_horz_white) ;               //put the image on the screen
    img_SetWord(NChndl, iSetFilterTimerText, IMAGE_INDEX, Language) ; // where frame is 0 to 0
    img_Show(NChndl,iSetFilterTimerText) ;
    img_SetWord(NChndl, iOrText, IMAGE_INDEX, Language) ; // where frame is 0 to 0
    img_Show(NChndl,iOrText) ;

    //g_SetWord(NChndl, iGallonsText, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_SetWord(NChndl, iGallonsText, IMAGE_INDEX, (metric*4)+Language) ; // where frame is 0 to 1 for gal or liter
    img_Show(NChndl,iGallonsText) ;

    img_ClearAttributes(NChndl, iSetTimer, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_Show(NChndl, iSetTimer);  // show button, only do this once
    img_SetWord(NChndl, iSetTimer, IMAGE_INDEX, Language); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iSetTimer) ;
    img_SetWord(NChndl, iMonths, IMAGE_INDEX, Language) ; // where frame is 0 to 1
    img_Show(NChndl,iMonths) ;

    img_SetPosition(NChndl,iUpArrowButtonHr,46,178);
    img_ClearAttributes(NChndl, iUpArrowButtonHr, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, iUpArrowButtonHr, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iUpArrowButtonHr) ;

    // DownArrowHr 1.0 generated 11/11/2016 5:00:43 PM
    img_SetPosition(NChndl,iDownArrowHr,46,254);
    img_ClearAttributes(NChndl, iDownArrowHr, I_TOUCH_DISABLE); // set to enable touch, only need to do this once
    img_SetWord(NChndl, iDownArrowHr, IMAGE_INDEX, 0); // where state is 0 for up and 1 for down, or 2 total states
    img_Show(NChndl,iDownArrowHr) ;

    img_SetPosition(NChndl,iFieldBox,160,216);
    img_SetWord(NChndl, iFieldBox, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iFieldBox) ;

    img_SetPosition(NChndl,iFieldBox,46,218);
    img_SetWord(NChndl, iFieldBox, IMAGE_INDEX, 0) ; // where frame is 0 to 0
    img_Show(NChndl,iFieldBox) ;
    gosub Up;

    //Font_Nirmala15_Halt_Blue();
    readit:  //loop here
    temp:=ReadButton(NChndl);
    switch (temp)
        case iUpArrowButtonHr: //go to the next screen
                gosub Up;
        break;
        case iDownArrowHr: //go to the next screen
               gosub Down;
        break;
        case iSetTimer:
                 to(COM0); putstr(SETFILTERGALS);  //store the new gallons
                 to(COM0); print([DEC] galloncode); //// Gallons 500,750,1000,1500 0-3

                to(COM0); putstr(SETFILTERMONTHS);  //store the new months
                /*switch (months)
                    case 3: to(COM0); print([DEC] 0);break; //store the new months
                    case 6: to(COM0); print([DEC] 1);break; //store the new months
                    case 9: to(COM0); print([DEC] 2);break; //store the new months
                    case 12: to(COM0); print([DEC] 3);break; //store the new months
                endswitch
                */
                months:=(months/3)-1; //setup index to month 3 6 9 12 array
                to(COM0); print([DEC] months);  //set the index
                SetCodeWithNumber(SETFILTERTYPE,FilterType);  //store the new filter type
                temp:=-2;
                pause(300);  //let com port finish before leaving  //dpm 5_22_2018 changed from 200 to 300 fix SD read error
        break;
    endswitch
    if (temp!=iback_icon && temp!= -2 ) goto readit; //loop to ignore non keypad presses
    img_SetAttributes(NChndl, iSetTimer, I_TOUCH_DISABLE); // cleanup handle

goto endit;
Up:
            if (months>=max-3)     //24 hour clock
            months:=max;
            else
            months:=months+3;
            endif
            gosub doprint;
endsub;
Down:
            if (months<=6)
            months:=3;
            else
            months:=months-3;
            endif
            gosub doprint;

endsub;

doprint:
        gfx_MoveTo(68,228); //field box location
            print("    "); // to overwrite second digit if there
            gfx_MoveTo(68,228); //field box location
            //img_SetPosition(NChndl,iFieldBox,46,218);
            //CenterTextImage( months,NChndl,0);
            print(months);
            gfx_MoveTo( 175,228); //field box location
            print("   "); // to overwrite second digit if there
            gfx_MoveTo( 175,228); //field box location
            print(gallons);
endsub;

endit:
return temp; //complete
endfunc

